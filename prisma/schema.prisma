datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  phone         String?
  status        String?
  role          Role      @default(landlord)
  accounts      Account[]
  properties    Property[]
  applications  Application[]
  documents     Document[]
  tenant        Tenant?

  @@map("users")
  Property Property[] @relation("OwnerProperties")
}

enum Role {
  landlord
  tenant
}

model VerificationToken {
  id            String @id @default(cuid())
  email         String
  token         String @unique
  expires       DateTime

  @@unique([email, token])
}

model passwordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model Property {
  id          String        @id @default(cuid())
  name        String
  address     String
  type        PropertyType
  details     String
  price       Int
  rooms       Int
  bathrooms   Int
  rentalType  RentalType
  kitchen     Boolean
  livingRoom  Boolean
  isRented    Boolean
  images      Image[]
  ownerId     String
  owner       User          @relation(fields: [ownerId], references: [id])
  applications Application[]
  tenants     Tenant[]      @relation("PropertyTenants")

  User User[] @relation("OwnerProperties")
}

model Image {
  id         String   @id @default(cuid())
  url        String
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

enum PropertyType {
  commercial
  house
  apartment
}

enum RentalType {
  short_term
  long_term
}

model Application {
  id          String          @id @default(cuid())
  userId      String
  propertyId  String
  status      ApplicationStatus @default(PENDING)
  user        User             @relation(fields: [userId], references: [id])
  property    Property         @relation(fields: [propertyId], references: [id])
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Document {
  id        String @id @default(cuid())
  name      String
  url       String
  userId    String
  createdAt DateTime @default(now())
  user      User   @relation(fields: [userId], references: [id])

}

model Tenant {
  id         String   @id @default(cuid())
  userId     String   @unique
  propertyId String
  status     String
  user       User     @relation(fields: [userId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, name: "PropertyTenants")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, propertyId])
}
